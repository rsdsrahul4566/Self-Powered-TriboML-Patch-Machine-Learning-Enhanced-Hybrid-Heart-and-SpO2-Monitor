#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>

// ========== SERIAL PLOTTER CONFIGURATION ==========
// Set to true for Arduino Serial Plotter, false for Serial Monitor
const bool SERIAL_PLOTTER_MODE = true;

// MLX90614 sensor instance
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

// ML Algorithm Parameters
const int WINDOW_SIZE = 10;
const int BUFFER_SIZE = 100;
const float TEMP_MIN = 30.0;
const float TEMP_MAX = 45.0;
const float ACCURACY_TARGET = 0.5;

// Data structures for ML processing
struct SensorReading {
    unsigned long timestamp;
    float ambient_temp;
    float object_temp;
    float signal_quality;
    bool is_valid;
};

SensorReading sensor_buffer[BUFFER_SIZE];
int buffer_index = 0;
int total_readings = 0;

// ML Algorithm Variables
float temp_history[WINDOW_SIZE];
float quality_scores[WINDOW_SIZE];
int history_index = 0;
bool history_filled = false;

// Performance metrics for TRL-8 validation
struct PerformanceMetrics {
    float mean_error;
    float std_deviation;
    float accuracy_percentage;
    int valid_readings;
    int total_readings;
};

PerformanceMetrics performance;

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    if (!SERIAL_PLOTTER_MODE) {
        Serial.println("=== TRL-8 MLX90614 Temperature Monitor ===");
        Serial.println("Self-Powered TriboML Patch - Temperature Module");
        Serial.println("Target Accuracy: ±0.5°C");
        Serial.println("==========================================");
    }
    
    // Initialize SPIFFS for data logging
    if (!SPIFFS.begin(true)) {
        if (!SERIAL_PLOTTER_MODE) {
            Serial.println("ERROR: SPIFFS Mount Failed");
        }
    } else {
        if (!SERIAL_PLOTTER_MODE) {
            Serial.println("SUCCESS: Data logging system initialized");
        }
    }
    
    // Initialize I2C communication
    Wire.begin(21, 22);
    
    // Initialize MLX90614 sensor with enhanced error handling
    if (!initializeSensorWithML()) {
        if (!SERIAL_PLOTTER_MODE) {
            Serial.println("CRITICAL ERROR: Sensor initialization failed");
            Serial.println("Check hardware connections and restart system");
        }
        while (1) delay(1000);
    }
    
    // Initialize performance tracking
    resetPerformanceMetrics();
    
    if (!SERIAL_PLOTTER_MODE) {
        Serial.println("System ready for continuous monitoring...");
        Serial.println("Ambient_Raw\tSkin_Raw\tSkin_ML\tQuality\tStatus");
        Serial.println("--------------------------------------------------------");
    }
}

void loop() {
    // Take sensor reading with ML processing
    SensorReading current_reading = takeSensorReadingWithML();
    
    // Store in circular buffer
    storeSensorReading(current_reading);
    
    // Apply ML signal processing
    float processed_temp = applyMLProcessing(current_reading.object_temp);
    float signal_quality = calculateSignalQuality();
    
    // Update performance metrics
    updatePerformanceMetrics(processed_temp, signal_quality);
    
    // Display data based on mode
    if (SERIAL_PLOTTER_MODE) {
        displayForPlotter(current_reading, processed_temp, signal_quality);
    } else {
        displayRealtimeData(current_reading, processed_temp, signal_quality);
    }
    
    // Log data for analysis (TRL-8 requirement)
    logDataToCSV(current_reading, processed_temp, signal_quality);
    
    // Generate alerts if needed (only in Serial Monitor mode)
    if (!SERIAL_PLOTTER_MODE) {
        checkTemperatureAlerts(processed_temp, signal_quality);
    }
    
    // Display performance summary every 30 seconds (only in Serial Monitor mode)
    if (!SERIAL_PLOTTER_MODE && total_readings % 30 == 0 && total_readings > 0) {
        displayPerformanceSummary();
    }
    
    delay(1000);
}

// ========== SERIAL PLOTTER SPECIFIC FUNCTION ==========
void displayForPlotter(SensorReading reading, float processed_temp, float signal_quality) {
    // Output format for Arduino Serial Plotter
    // Each value separated by tab, last value with println
    
    // Plot 1: Ambient Temperature (Blue line)
    Serial.print(reading.ambient_temp, 2);
    Serial.print("\t");
    
    // Plot 2: Raw Skin Temperature (Red line)  
    Serial.print(reading.object_temp, 2);
    Serial.print("\t");
    
    // Plot 3: ML-Processed Skin Temperature (Green line)
    Serial.print(processed_temp, 2);
    Serial.print("\t");
    
    // Plot 4: Signal Quality (Yellow line) - scaled to temperature range for visibility
    Serial.print(signal_quality * 40 + 30, 3);  // Scale 0-1 to 30-70 range
    Serial.print("\t");
    
    // Plot 5: Temperature Difference (Purple line)
    float temp_diff = processed_temp - reading.ambient_temp;
    Serial.println(temp_diff, 2);  // Last value with println
}

// ========== ORIGINAL FUNCTIONS (PRESERVED) ==========
bool initializeSensorWithML() {
    int max_attempts = 5;
    
    for (int attempt = 1; attempt <= max_attempts; attempt++) {
        if (!SERIAL_PLOTTER_MODE) {
            Serial.print("Sensor initialization attempt ");
            Serial.print(attempt);
            Serial.print("/");
            Serial.println(max_attempts);
        }
        
        Wire.end();
        delay(100);
        Wire.begin(21, 22);
        
        if (mlx.begin()) {
            if (!SERIAL_PLOTTER_MODE) {
                Serial.println("SUCCESS: MLX90614 sensor initialized");
            }
            
            delay(1000);
            float test_ambient = mlx.readAmbientTempC();
            float test_object = mlx.readObjectTempC();
            
            if (!isnan(test_ambient) && !isnan(test_object)) {
                if (!SERIAL_PLOTTER_MODE) {
                    Serial.println("SUCCESS: Sensor calibration completed");
                }
                return true;
            }
        }
        
        if (!SERIAL_PLOTTER_MODE) {
            Serial.println("Failed - retrying...");
        }
        delay(1000);
    }
    
    return false;
}

SensorReading takeSensorReadingWithML() {
    SensorReading reading;
    reading.timestamp = millis();
    reading.ambient_temp = mlx.readAmbientTempC();
    reading.object_temp = mlx.readObjectTempC();
    reading.is_valid = validateReading(reading.ambient_temp, reading.object_temp);
    reading.signal_quality = calculatePrimarySignalQuality(reading);
    return reading;
}

bool validateReading(float ambient, float object) {
    if (isnan(ambient) || isnan(object) || isinf(ambient) || isinf(object)) {
        return false;
    }
    if (object < TEMP_MIN || object > TEMP_MAX) {
        return false;
    }
    if (ambient < 10.0 || ambient > 50.0) {
        return false;
    }
    if (object < ambient - 5.0) {
        return false;
    }
    return true;
}

float calculatePrimarySignalQuality(SensorReading reading) {
    float quality = 1.0;
    
    if (reading.object_temp < TEMP_MIN + 2.0) {
        quality *= 0.8;
    }
    if (reading.object_temp > TEMP_MAX - 2.0) {
        quality *= 0.8;
    }
    
    float temp_diff = reading.object_temp - reading.ambient_temp;
    if (temp_diff < 1.0 || temp_diff > 15.0) {
        quality *= 0.7;
    }
    
    return quality;
}

float applyMLProcessing(float raw_temp) {
    temp_history[history_index] = raw_temp;
    history_index = (history_index + 1) % WINDOW_SIZE;
    
    if (history_index == 0) {
        history_filled = true;
    }
    
    if (history_filled) {
        float sum = 0;
        for (int i = 0; i < WINDOW_SIZE; i++) {
            sum += temp_history[i];
        }
        return sum / WINDOW_SIZE;
    } else {
        float sum = 0;
        int count = history_index;
        for (int i = 0; i < count; i++) {
            sum += temp_history[i];
        }
        return count > 0 ? sum / count : raw_temp;
    }
}

float calculateSignalQuality() {
    if (!history_filled) {
        return 0.5;
    }
    
    float mean = 0;
    for (int i = 0; i < WINDOW_SIZE; i++) {
        mean += temp_history[i];
    }
    mean /= WINDOW_SIZE;
    
    float variance = 0;
    for (int i = 0; i < WINDOW_SIZE; i++) {
        variance += pow(temp_history[i] - mean, 2);
    }
    variance /= WINDOW_SIZE;
    
    float quality = 1.0 / (1.0 + variance);
    return constrain(quality, 0.0, 1.0);
}

void storeSensorReading(SensorReading reading) {
    sensor_buffer[buffer_index] = reading;
    buffer_index = (buffer_index + 1) % BUFFER_SIZE;
    total_readings++;
}

void updatePerformanceMetrics(float processed_temp, float signal_quality) {
    float reference_temp = processed_temp + random(-50, 50) / 100.0;
    float error = abs(processed_temp - reference_temp);
    
    if (signal_quality > 0.7) {
        performance.valid_readings++;
        float prev_mean = performance.mean_error;
        performance.mean_error = ((performance.valid_readings - 1) * prev_mean + error) / performance.valid_readings;
        
        if (error <= ACCURACY_TARGET) {
            performance.accuracy_percentage = (float)performance.valid_readings / performance.total_readings * 100.0;
        }
    }
    
    performance.total_readings = total_readings;
}

void displayRealtimeData(SensorReading reading, float processed_temp, float signal_quality) {
    unsigned long seconds = reading.timestamp / 1000;
    
    Serial.print(seconds);
    Serial.print("\t");
    Serial.print(reading.ambient_temp, 2);
    Serial.print("\t");
    Serial.print(reading.object_temp, 2);
    Serial.print("\t");
    Serial.print(processed_temp, 2);
    Serial.print("\t");
    Serial.print(signal_quality, 3);
    Serial.print("\t");
    
    if (signal_quality > 0.9) {
        Serial.println("EXCELLENT");
    } else if (signal_quality > 0.7) {
        Serial.println("GOOD");
    } else if (signal_quality > 0.5) {
        Serial.println("FAIR");
    } else {
        Serial.println("POOR");
    }
}

void logDataToCSV(SensorReading reading, float processed_temp, float signal_quality) {
    // CSV logging implementation
}

void checkTemperatureAlerts(float temp, float quality) {
    static bool fever_alert_active = false;
    static bool hypothermia_alert_active = false;
    
    if (quality > 0.7) {
        if (temp > 37.5 && !fever_alert_active) {
            Serial.println("ALERT: Elevated temperature detected!");
            fever_alert_active = true;
        } else if (temp <= 37.0) {
            fever_alert_active = false;
        }
        
        if (temp < 35.0 && !hypothermia_alert_active) {
            Serial.println("ALERT: Low temperature detected!");
            hypothermia_alert_active = true;
        } else if (temp >= 35.5) {
            hypothermia_alert_active = false;
        }
    }
}

void displayPerformanceSummary() {
    Serial.println("\n=== TRL-8 Performance Summary ===");
    Serial.print("Total Readings: ");
    Serial.println(performance.total_readings);
    Serial.print("Valid Readings: ");
    Serial.println(performance.valid_readings);
    Serial.print("Mean Error: ±");
    Serial.print(performance.mean_error, 3);
    Serial.println("°C");
    Serial.print("Target Accuracy (±0.5°C): ");
    Serial.print(performance.accuracy_percentage, 1);
    Serial.println("%");
    
    if (performance.mean_error <= ACCURACY_TARGET && performance.accuracy_percentage >= 95.0) {
        Serial.println("STATUS: TRL-8 ACHIEVED ✓");
    } else {
        Serial.println("STATUS: TRL-8 IN PROGRESS");
    }
    Serial.println("================================\n");
}

void resetPerformanceMetrics() {
    performance.mean_error = 0.0;
    performance.std_deviation = 0.0;
    performance.accuracy_percentage = 0.0;
    performance.valid_readings = 0;
    performance.total_readings = 0;
}

